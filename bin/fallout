#!/usr/bin/env ruby

require 'fallout'
require 'trollop'

cmd = ARGV.shift
help = <<-EOS

Fallout - Amazon EC2 backup and restore utility, version: #{Fallout::VERSION}

To backup:
  fallout backup -v <volume_id> -k <keep_days>

  options:
    -v volume id to create snapshot for
    -k number of days to keep the snapshots

  example:
    # backup volume and keep it for 3 days
    fallout backup -v v23dbade3 -k 3

To restore:
  fallout restore -i <instance_id> -v <volume_id>

  options:
    -i instance id to restore
    -v volume id to restore

  example:
  # restore volume
  fallout restore -i i39dabd -v v23dbade3

EOS

opts = case cmd
when 'backup'
  Trollop::options do
    opt :volume, 'Volume ID', type: :string
    opt :keep, 'Number of days to keep snapshots for', type: :integer
  end
when  'restore'
  Trollop::options do
    opt :instance, 'Instance ID', type: :string
    opt :volume, 'Volume ID', type: :string
  end
else
  puts help
end

case cmd
when 'backup'
  if(opts[:volume].nil? || opts[:keep].nil?)
    puts '-v and -k are required for backup'
  else
    f = Fallout::Backup.new(opts)
    expired_snapshots = f.delete_expired_snapshots
    if expired_snapshots.any?
      puts "Deleted snapshots #{expired_snapshots.map(&:id).join(', ')}"
    else
      puts "No expired snapshots found"
    end
    new_snapshot, expires_after = f.run
    puts "Created new snapshot #{new_snapshot.id}, expires after #{expires_after}"
  end
when 'restore'
  if(opts[:instance].nil? || opts[:volume].nil?)
    puts '-i and -v are required for restore'
  else
    begin
      r = Fallout::Restore.new(opts)
      snapshot = r.get_latest_snapshot_for_volume(r.get_volume)
      puts "Initiating omega protocol, retina scan required."
      sleep 3
      puts "Ok, let's do it without retina, shutting down your instance."
      instance = r.shutdown_instance
      puts "Shut down instance successfully: #{instance.id}, status: #{instance.status}"
      attachment = r.detach_volume(instance)
      puts "Detached volume #{attachment.volume.id} from instance #{instance.id} successfully"
      new_volume = r.create_volume(snapshot)
      puts "Created new volume from the latest snapshot (#{new_volume.id})"
      r.attach_volume(new_volume, instance)
      puts "Attached new volume to instance"
      instance = r.start_instance(instance)
      puts "Successfully restored and started the instance with the new volume"
      puts "Instance public hostname: #{instance.dns_name}"
      puts "You may want to delete the old, detached volume #{attachment.volume.id} and old volume snapshots"
      puts "IMPORTANT: You must update your backup command to use new volume_id: #{new_volume.id}"
    rescue Exception => e
      puts e.message
    end
  end
end
